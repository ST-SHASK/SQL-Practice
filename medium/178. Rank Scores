SQL架构
Write a SQL query to rank scores. If there is a tie between two scores, 
both should have the same ranking. Note that after a tie, 
the next ranking number should be the next consecutive integer value. 
In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+


Answer:
1.
select 
    a.Score as Score,
    (select count(distinct b.Score) from Scores b where b.Score >= a.Score) as Rank
from
    Scores a
order by
    a.Score desc;


2.LEFT JOIN
添加一列序号。
SELECT 
    s.Score AS Score, @num:=@num+1 AS Rank
FROM 
    (SELECT DISTINCT Score FROM Scores ORDER BY Score DESC) s, (SELECT @num:=0) r
得到去重后的 Score 和 Rank。
外连接此条查询，得到如下 SQL,两表的 Score 作为关联关系,a 表的 Score 与 b 表的 Score 相等时 Rank相同。 
SELECT a.Score, p.Rank
FROM Scores a 
    LEFT JOIN
        (
            SELECT s.Score AS Score, @num:=@num+1 AS Rank
            FROM (SELECT DISTINCT Score FROM Scores ORDER BY Score DESC) s, (SELECT @num:=0) r
        ) AS p
    ON a.Score = p.Score
ORDER BY a.Score DESC
